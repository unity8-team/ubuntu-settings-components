/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -i metatypes.h org.opensuse.CupsPkHelper.Mechanism.xml -p cupspkhelpermechanism
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CUPSPKHELPERMECHANISM_H
#define CUPSPKHELPERMECHANISM_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "metatypes.h"

/*
 * Proxy class for interface org.opensuse.CupsPkHelper.Mechanism
 */
class OrgOpensuseCupsPkHelperMechanismInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.opensuse.CupsPkHelper.Mechanism"; }

public:
    OrgOpensuseCupsPkHelperMechanismInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgOpensuseCupsPkHelperMechanismInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> ClassAddPrinter(const QString &name, const QString &printer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(printer);
        return asyncCallWithArgumentList(QStringLiteral("ClassAddPrinter"), argumentList);
    }

    inline QDBusPendingReply<QString> ClassDelete(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("ClassDelete"), argumentList);
    }

    inline QDBusPendingReply<QString> ClassDeletePrinter(const QString &name, const QString &printer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(printer);
        return asyncCallWithArgumentList(QStringLiteral("ClassDeletePrinter"), argumentList);
    }

    inline QDBusPendingReply<QString, QStringMap> DevicesGet(int timeout, int limit, const QStringList &include_schemes, const QStringList &exclude_schemes)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(timeout) << QVariant::fromValue(limit) << QVariant::fromValue(include_schemes) << QVariant::fromValue(exclude_schemes);
        return asyncCallWithArgumentList(QStringLiteral("DevicesGet"), argumentList);
    }
    inline QDBusReply<QString> DevicesGet(int timeout, int limit, const QStringList &include_schemes, const QStringList &exclude_schemes, QStringMap &devices)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(timeout) << QVariant::fromValue(limit) << QVariant::fromValue(include_schemes) << QVariant::fromValue(exclude_schemes);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("DevicesGet"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            devices = qdbus_cast<QStringMap>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QString> FileGet(const QString &resource, const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(resource) << QVariant::fromValue(filename);
        return asyncCallWithArgumentList(QStringLiteral("FileGet"), argumentList);
    }

    inline QDBusPendingReply<QString> FilePut(const QString &resource, const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(resource) << QVariant::fromValue(filename);
        return asyncCallWithArgumentList(QStringLiteral("FilePut"), argumentList);
    }

    inline Q_DECL_DEPRECATED QDBusPendingReply<QString> JobCancel(int jobid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jobid);
        return asyncCallWithArgumentList(QStringLiteral("JobCancel"), argumentList);
    }

    inline QDBusPendingReply<QString> JobCancelPurge(int jobid, bool purge)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jobid) << QVariant::fromValue(purge);
        return asyncCallWithArgumentList(QStringLiteral("JobCancelPurge"), argumentList);
    }

    inline QDBusPendingReply<QString> JobRestart(int jobid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jobid);
        return asyncCallWithArgumentList(QStringLiteral("JobRestart"), argumentList);
    }

    inline QDBusPendingReply<QString> JobSetHoldUntil(int jobid, const QString &job_hold_until)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jobid) << QVariant::fromValue(job_hold_until);
        return asyncCallWithArgumentList(QStringLiteral("JobSetHoldUntil"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterAdd(const QString &name, const QString &uri, const QString &ppd, const QString &info, const QString &location)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(uri) << QVariant::fromValue(ppd) << QVariant::fromValue(info) << QVariant::fromValue(location);
        return asyncCallWithArgumentList(QStringLiteral("PrinterAdd"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterAddOption(const QString &name, const QString &option, const QStringList &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(option) << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QStringLiteral("PrinterAddOption"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterAddOptionDefault(const QString &name, const QString &option, const QStringList &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(option) << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QStringLiteral("PrinterAddOptionDefault"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterAddWithPpdFile(const QString &name, const QString &uri, const QString &ppd, const QString &info, const QString &location)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(uri) << QVariant::fromValue(ppd) << QVariant::fromValue(info) << QVariant::fromValue(location);
        return asyncCallWithArgumentList(QStringLiteral("PrinterAddWithPpdFile"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterDelete(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("PrinterDelete"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterDeleteOptionDefault(const QString &name, const QString &option)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(option);
        return asyncCallWithArgumentList(QStringLiteral("PrinterDeleteOptionDefault"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetAcceptJobs(const QString &name, bool enabled, const QString &reason)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(enabled) << QVariant::fromValue(reason);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetAcceptJobs"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetDefault(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetDefault"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetDevice(const QString &name, const QString &device)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(device);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetDevice"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetEnabled(const QString &name, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetEnabled"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetErrorPolicy(const QString &name, const QString &policy)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(policy);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetErrorPolicy"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetInfo(const QString &name, const QString &info)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(info);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetInfo"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetJobSheets(const QString &name, const QString &start, const QString &end)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(start) << QVariant::fromValue(end);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetJobSheets"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetLocation(const QString &name, const QString &location)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(location);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetLocation"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetOpPolicy(const QString &name, const QString &policy)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(policy);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetOpPolicy"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetShared(const QString &name, bool shared)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(shared);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetShared"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetUsersAllowed(const QString &name, const QStringList &users)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(users);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetUsersAllowed"), argumentList);
    }

    inline QDBusPendingReply<QString> PrinterSetUsersDenied(const QString &name, const QStringList &users)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(users);
        return asyncCallWithArgumentList(QStringLiteral("PrinterSetUsersDenied"), argumentList);
    }

    inline QDBusPendingReply<QString, QStringMap> ServerGetSettings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ServerGetSettings"), argumentList);
    }
    inline QDBusReply<QString> ServerGetSettings(QStringMap &settings)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("ServerGetSettings"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            settings = qdbus_cast<QStringMap>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QString> ServerSetSettings(const QStringMap &settings)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(settings);
        return asyncCallWithArgumentList(QStringLiteral("ServerSetSettings"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace opensuse {
    namespace CupsPkHelper {
      typedef ::OrgOpensuseCupsPkHelperMechanismInterface Mechanism;
    }
  }
}
#endif
